package routines;

import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

import routines.system.Hex;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class HSIEncryptUtil {

		    public static String ENCRYPT_KEY = "Encrypt"; //$NON-NLS-1$

		    private static String rawKey = "Henry-Key"; //$NON-NLS-1$

		    private static SecretKey key = null;

		    private static SecureRandom secureRandom = new SecureRandom();

		    private static String CHARSET = "UTF-8";

		    private static SecretKey getSecretKey() throws Exception {
		        if (key == null) {

		            byte rawKeyData[] = rawKey.getBytes(CHARSET);//$NON-NLS-1$
		            DESKeySpec dks = new DESKeySpec(rawKeyData);
		            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES"); //$NON-NLS-1$
		            key = keyFactory.generateSecret(dks);
		        }
		        return key;
		    }

		    public static String encryptPassword(String input) throws Exception {
		        if (input == null || input.length() == 0) {
		            return input;
		        }

		        SecretKey key = getSecretKey();
		        Cipher c = Cipher.getInstance("DES"); //$NON-NLS-1$
		        c.init(Cipher.ENCRYPT_MODE, key, secureRandom);
		        byte[] cipherByte = c.doFinal(input.getBytes(CHARSET));//$NON-NLS-1$
		        String dec = Hex.encodeHexString(cipherByte);
		        return dec;
		    }

		    public static String decryptPassword(String input) {
		        if (input == null || input.length() == 0) {
		            return input;
		        }
		        byte[] dec = Hex.decodeHex(input.toCharArray());
		        try {
		            SecretKey key = getSecretKey();
		            Cipher c = Cipher.getInstance("DES"); //$NON-NLS-1$
		            c.init(Cipher.DECRYPT_MODE, key, secureRandom);
		            byte[] clearByte = c.doFinal(dec);
		            return new String(clearByte, CHARSET);
		        } catch (Exception e) {
		            e.printStackTrace();
		        }
		        return null;
		    }
		
}

/*
String encryptpass=routines.HSIEncryptUtil.encryptPassword(input_row.pass);
System.out.println("ecrypt password"+encryptpass);

String decryptpass=routines.HSIEncryptUtil.decryptPassword(encryptpass);

System.out.println("decrypt password"+decryptpass);

row3.key.contains(context.ctxKeySearch)?routines.routines.HSIEncryptUtil.decryptPassword(row3.value):row3.value 

*/